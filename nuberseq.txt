1. extend NumberSeqModule Enum 
2. add new element named ConVMSVehicleManagement
3. Create new class NumberSeqModule_CS and extend NumberSeqApplicationModule
4. 
internal final class NumberSeqModule_ConVMS extends NumberSeqApplicationModule
{
    public NumberSeqModule numberSeqModule()
    {
        return NumberSeqModule::ConVMSVehicleManagement;
    }

    /// <summary>
    /// Appends the current class to the map that links
    /// modules to number sequence data type generators.
    /// </summary>
    [SubscribesTo(classstr(NumberSeqGlobal), delegatestr(NumberSeqGlobal, buildModulesMapDelegate))]
        static void buildModulesMapSubscriber(Map numberSeqModuleNameMap)
    {
        NumberSeqGlobal::addModuleToMap( classnum(NumberSeqModule_ConVMS), numberSeqModuleNameMap);
    }

    protected void loadModule()
    {
        NumberSeqDatatype datatype;
        datatype = NumberSeqDatatype::construct();
        // Vehicle number
        datatype.parmDatatypeId(extendedTypeNum(ConVMSVehicleId));
        // Unique key for the identification of vehicles.
        // The key is used when creating new vehicles
        datatype.parmReferenceHelp(literalstr("Vehicle Id"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(1);
        datatype.addParameterType(NumberSeqParameterType::DataArea,true, false);
        this.create(datatype);
        // Vehicle service order
        datatype.parmDatatypeId(extendedTypeNum(ConVMSVehicleServiceId));
        // Unique key for the identification of service orders.
        // The key is used when creating new services orders
        datatype.parmReferenceHelp(literalstr("<Service Id>"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(2);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
    }

}
5. copy and past the parameter form
6. edit the serviceTable as follows
protected NumberSeqFormHandler numberSeqFormHandler( FormRun _formRun, FormDataSource _serviceTableDS)
    {
        if (!numberSeqFormHandler)
        {
            RefRecId localNumSeqId;
            RefFieldId serviceIdField;
            localNumSeqId = ConVMSParameters::NumRefServiceId().NumberSequenceId;
            serviceIdField = fieldNum(ConVMSVehicleServiceTable, ServiceId);
            numberSeqFormHandler = NumberSeqFormHandler::newForm( localNumSeqId, _formRun, _serviceTableDS, serviceIdField);
        }
        return numberSeqFormHandler;
    }

    public void formMethodClose()
    {
        if (numberSeqFormHandler)
        {
            numberSeqFormHandler.formMethodClose();
        }
    }

    public void formMethodDataSourceCreate(FormRun _element, FormDataSource _serviceTableDS)
    {
        this.numberSeqFormHandler(_element, _serviceTableDS).formMethodDataSourceCreate();
    }

    public void formMethodDataSourceDelete( FormRun _element, FormDataSource _serviceTableDS, boolean _forced = false)
    {
        this.numberSeqFormHandler(_element, _serviceTableDS).formMethodDataSourceDelete(_forced);
    }

    public void formMethodDataSourceLinkActive(FormRun _element, FormDataSource _serviceTableDS)
    {
        this.numberSeqFormHandler(_element, _serviceTableDS).formMethodDataSourceLinkActive();
    }

    public boolean formMethodDataSourceValidateWrite( FormRun _element, FormDataSource _serviceTableDS)
    {
        boolean ret = true;
        if (!this.numberSeqFormHandler( _element, _serviceTableDS).formMethodDataSourceValidateWrite())
        {
            ret = false;
        }
        return ret;
    }

    public void formMethodDataSourceWrite( FormRun _element, FormDataSource _serviceTableDS)
    {
        this.numberSeqFormHandler(_element, _serviceTableDS).formMethodDataSourceWrite();
    }
